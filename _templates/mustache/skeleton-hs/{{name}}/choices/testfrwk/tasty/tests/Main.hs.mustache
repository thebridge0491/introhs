#!/bin/sh
{-
EXTRA_PKGDB=`find $HOME/.stack/snapshots -type f -name package.cache -exec dirname {} \;`
DEPNS_PKGIDS=`for pkg in base tasty-hunit tasty-quickcheck hslogger ConfigFile regex-posix ; do echo -n -package-id= ; ghc-pkg --global --user --package-db=$EXTRA_PKGDB --simple-output field $pkg id | head -n1 ; done`

#exec ghci -v1 -Wall -fno-warn-type-defaults -fno-warn-missing-signatures -rtsopts -with-rtsopts=-N -i -isrc:tests -global-package-db -user-package-db -package-db=$EXTRA_PKGDB $DEPNS_PKGIDS{{#ffilib}} -lintro_c-practice{{/ffilib}} $0
exec runhaskell -v1 -Wall -fno-warn-type-defaults -fno-warn-missing-signatures -rtsopts -with-rtsopts=-N -i -isrc:tests -global-package-db -user-package-db -package-db=$EXTRA_PKGDB $DEPNS_PKGIDS{{#ffilib}} -lintro_c-practice{{/ffilib}} $0 $@
-}
-- #!/usr/bin/env runhaskell

module Main (main) where

import Test.Tasty
import Test.Tasty.QuickCheck as TastyQC

import qualified NewCase
import qualified NewProp
--import qualified ClassicCase
--import qualified ClassicProp

--qcOptions = localOption (TastyQC.QuickCheckTests 10)
qcOptions = adjustOption (\v -> if v > (TastyQC.QuickCheckTests 30) then TastyQC.QuickCheckTests 10 else v)

main :: IO ()
main = defaultMain $ qcOptions $ testGroup "Tests" tests

tests = map (uncurry testGroup) 
    [("NewCase", NewCase.tcases), ("NewProp", NewProp.tprops)
    --,("ClassicCase", ClassicCase.tcases), ("ClassicProp", ClassicProp.tprops)
    ]

{-
:main arg1 argN
-}
