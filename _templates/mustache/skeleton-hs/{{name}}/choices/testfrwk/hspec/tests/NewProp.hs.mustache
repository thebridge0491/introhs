{-# LANGUAGE ScopedTypeVariables #-}
module NewProp (spec) where

import Test.Hspec
import Test.QuickCheck
--import Test.QuickCheck.Property as Prop
import Data.List

uncurry3 f3 (x, y, z) = f3 x y z

-- Data.Functor.<$> ; GHC.Base.<*>   -- prefix fmap --> infix <$>
genTup2 :: Gen a -> Gen a -> Gen (a, a)
genTup2 gen0 gen1 = (,) <$> gen0 <*> gen1

genTup3 :: Gen a -> Gen a -> Gen a -> Gen (a, a, a)
genTup3 gen0 gen1 gen2 = (,,) <$> gen0 <*> gen1 <*> gen2

--epsilon = 0.001
--(lst, revlst) = ([0..4], reverse (enumFromTo 0 4))

propCommutAdd :: (Eq a, Show a, Num a) => a -> a -> Bool
propCommutAdd x y = x + y == y + x

propAssocAdd :: (Eq a, Show a, Num a) => a -> a -> a -> Bool
propAssocAdd x y z = (x + y) + z == x + (y + z)

propRevRev, propRevId :: (Eq a, Show a) => [a] -> Bool
propRevRev xs = xs == (reverse . reverse) xs
propRevId xs = xs == reverse xs

propSortRev :: (Eq a, Show a, Ord a) => [a] -> Bool
propSortRev xs = sort xs == (sort . reverse) xs

propSortMin :: (Eq a, Show a, Ord a) => [a] -> Property
propSortMin xs = (not . null) xs ==> (head . sort) xs == minimum xs

propSortMinAppend:: (Eq a, Show a, Ord a) => NonEmptyList a -> NonEmptyList a -> Bool
propSortMinAppend (NonEmpty xs) (NonEmpty ys) = (head . sort) (xs ++ ys) == min (minimum xs) (minimum ys)


propCommutAddInts = (propCommutAdd :: Int -> Int -> Bool)
propAssocAddInts = (propAssocAdd :: Int -> Int -> Int -> Bool)

propCommutAddFlts = (propCommutAdd :: Float -> Float -> Bool)
propAssocAddFlts = (propAssocAdd :: Float -> Float -> Float -> Bool)

genC = (suchThat (elements [0..20]) even)
genTup2Int = genTup2 (elements [0..10]) (elements [(-18)..(-1)])
genTup3Int = genTup3 genC genC genC

propComb1 :: (Int -> Int -> Bool) -> Property
propComb1 = (within 100) . forAll genTup2Int . uncurry

propComb2 :: (Int -> Int -> Int -> Bool) -> Property
propComb2 = forAll genTup3Int . uncurry3

propComb3 :: (String -> Bool) -> Property
propComb3 = forAll (listOf1 $ elements [' '..'~'])


spec :: Spec
spec = do
  describe "NewProp" $ do
    context "when commutative addition" $ do
      it "can commutAdd ints" $ do
        propComb1 propCommutAddInts
    
      it "can commutAdd floats" $ property $
        property propCommutAddFlts
    
    context "when associative addition" $ do
      it "can assocAdd ints" $ do
        propComb2 propAssocAddInts
      
      it "can assocAdd floats" $ do
        property propAssocAddFlts
    
    context "when rearranging list" $ do
      it "can reverse & reverse list to original" $ do
        property (propRevRev :: [Int] -> Bool)
      
      it "can reverse list to original" $ do
        property (propRevId :: [Int] -> Bool)
      
      it "can equate sorted list & sorted reverse list" $ do
        propComb3 (propSortRev :: String -> Bool)
    
    context "when minimum/maximum of list(s)" $ do
      it "can equate minimum & head of sorted list" $ do
        property (propSortMin :: [Int] -> Property)
        
      it "can equate minimum between 2 lists & head of sorted combined lists" $ do
        property (propSortMinAppend :: NonEmptyList Int -> NonEmptyList Int -> Bool)
