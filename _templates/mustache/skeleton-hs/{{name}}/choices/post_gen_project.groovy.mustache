import java.nio.file.*

//println "System.env: " + System.env
//println "System.properties: " + System.properties
//System.properties.each{ k, v -> println "$k: $v" }

//----------------------------------------
def glob_files(String dir) {
	def items = []
	Paths.get(dir).toFile().eachFile() { items += it }
	return items
}

def run_cmd(String cmd, File dir) {
	def proc = cmd.execute(null, dir)
	proc.waitForProcessOutput((Appendable)System.out, System.err)
	if (0 != proc.exitValue()) {
		throw new Exception("Command '${cmd}' exited with code: ${proc.exitValue()}")
	}
}

def choices = [
	'readmeext': '{{readmeext}}{{^readmeext}}.rst{{/readmeext}}',
	'license': '{{license}}{{^license}}Apache-2.0{{/license}}',
	'buildtool': '{{buildtool}}{{^buildtool}}stack{{/buildtool}}',
	'testfrwk': '{{testfrwk}}{{^testfrwk}}test-framework{{/testfrwk}}',
	'executable': '{{executable}}{{^executable}}no{{/executable}}',
	'ffilib': '{{ffilib}}{{^ffilib}}none{{/ffilib}}'
	]

def dirX = Paths.get("${System.getProperty('user.dir')}",
	System.getProperty('toDir', '{{name}}{{^name}}introhs-util{{/name}}')).toFile()
def nesteddirs = '{{nesteddirs}}{{^nesteddirs}}introhs/util{{/nesteddirs}}'
def category = '{{category}}{{^category}}Data{{/category}}'
def parentcap = '{{parentcap}}{{^parentcap}}Introhs{{/parentcap}}'

["mkdir -p build", "cp -vfR choices build/", "rm -vfr choices"].each {
	cmd -> run_cmd(cmd, dirX) }

run_cmd("cp -v build/choices/readme/README${choices['readmeext']} README${choices['readmeext']}", dirX)
if (Files.exists(Paths.get("build/choices/_parent_readme"))) {
	run_cmd("cp -v build/choices/_parent_readme/README${choices['readmeext']} build/choices/_parent_init/README${choices['readmeext']}", dirX)
}

if (choices['license'] in ['Apache-2.0', 'MIT', 'BSD-3-Clause', 'GPL-3.0+', 'ISC', 
		'Unlicense']) {
	run_cmd("cp -v build/choices/license/LICENSE_${choices['license']} LICENSE", dirX)
}

if (Files.exists(Paths.get("${dirX}/build/choices/build_tool")) && (choices['buildtool'] in ['stack', 'cabal', 'make'])) {
	def files = glob_files("${dirX}/build/choices/build_tool/${choices['buildtool']}")
	run_cmd("cp -vR ${files.join(' ')} .", dirX)
} else if (Files.exists(Paths.get("${dirX}/build/choices/build_tool"))) { // default: stack
	def files = glob_files("${dirX}/build/choices/build_tool/stack")
	run_cmd("cp -vR ${files.join(' ')} .", dirX)
}

if (Files.exists(Paths.get("${dirX}/build/choices/testfrwk")) && (choices['testfrwk'] in ['test-framework', 'hspec', 'tasty'])) {
	def files = glob_files("${dirX}/build/choices/testfrwk/${choices['testfrwk']}")
	run_cmd("cp -vR ${files.join(' ')} .", dirX)
} else if (Files.exists(Paths.get("${dirX}/build/choices/testfrwk"))) { // default: test-framework
	def files = glob_files("${dirX}/build/choices/testfrwk/test-framework")
	run_cmd("cp -vR ${files.join(' ')} .", dirX)
}

if (Files.exists(Paths.get("${dirX}/src")) && ('yes' != choices['executable'])) {
    run_cmd("rm -vf src/${category}/${parentcap}/Main.hs", dirX)
}

if (Files.exists(Paths.get("${dirX}/build/choices/ffi_lib")) && (choices['ffilib'] in ['foreign'])) {
	def files = glob_files("${dirX}/build/choices/ffi_lib/${choices['ffilib']}")
	run_cmd("cp -vR ${files.join(' ')} src/${category}/${parentcap}/", dirX)
}

if (Files.exists(Paths.get("_templates")) && Files.isDirectory(Paths.get("_templates"))) {
	def skeletondir = '{{skeletondir}}{{^skeletondir}}${System.env["HOME"]}/Templates/mustache/skeleton-hs{{/skeletondir}}'
	def skelParDir = (new File(skeletondir)).parent
	def scripts = glob_files("${skelParDir}").findAll{f -> 
		f.path =~ /render_mustache\..*/}
	run_cmd("mkdir -vp ../_templates/mustache", dirX)
	run_cmd("cp -vfR ${skeletondir} ${scripts.join(' ')} ../_templates/mustache/", dirX)
}
